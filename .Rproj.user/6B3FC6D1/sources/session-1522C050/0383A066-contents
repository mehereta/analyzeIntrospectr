### File for R functions
#Import packages

library(tidyverse)
library(dplyr)
library(lsr)
library(rstatix)
library(emmeans)

#Function 1: Import,process, and clean files

clean.files <- function(filepath) {
  setwd(filepath)
  files = Sys.glob('BLC_*.csv') # grab all the BLC files
  count = 0
  # for loop that goes through all the data files in files
  full_data = data.frame()
  for (file in files) {
    #df = read.csv(file) # read each individual data file
    size = file.info(file)$size # get file size.
    if(size > 10000){ # Files less than 10kb are kind of useless so skip those
      date = file %>% substr(24,28) # get date of session from file name
      if(date == '10-20'){ # first date (10-20) had slightly different backend so we process them differently
        raw_df = read_csv(file)
        raw_df = raw_df %>%
          select(mouse.time,mouse.clicked_name,pracBlock.ran,words,itemType,correctAns,participant,blockNum,blockSelecter.ran,blockNum)
        raw_df = raw_df %>%
          fill(c(words,itemType,correctAns,pracBlock.ran),.direction = "up") %>% # slide these columns up to account for weird split rows
          mutate(blockNum = case_when(pracBlock.ran==1 ~ 'practice',
                                      is.na(pracBlock.ran) ~ blockNum)) %>%  # label practice
          fill(blockNum, .direction = 'up')%>%
          mutate(repeated_word = words == lag(words)) %>% # figure out if there's a split row or not. Trials w/o a response aren't split
          mutate(repeated_word = case_when(is.na(repeated_word)~F,
                                           !is.na(repeated_word)~repeated_word)) %>%
          filter(repeated_word==F) %>% # remove split rows based on if word repeated or not
          mutate(date=date,
                 block = blockNum) %>%
          select(-blockNum)
      }
      else{ # if the date isn't from 10-20 process as such
        raw_df = read_csv(file)

        # grab only the columns we are interested in
        raw_df = raw_df %>%
          select(mouse.time,mouse.clicked_name,pracBlock.ran,words,itemType,correctAns,participant,block)
        raw_df = raw_df %>%
          fill(c(words,itemType,correctAns,pracBlock.ran,block),.direction = "up") %>% # slide these columns up to account for weird split rows
          filter(!is.na(mouse.time)) %>%
          mutate(repeated_word = words == lag(words)) %>%  # figure out if there's a split row or not. Trials w/o a response aren't split
          mutate(repeated_word = case_when(is.na(repeated_word)~F,
                                           !is.na(repeated_word)~repeated_word))%>%
          filter(repeated_word==F)%>% # remove split rows based on if word repeated or not
          mutate(date=date)
      }
      full_data = full_data %>% bind_rows(raw_df) # bind it all together
    }}
  return(full_data)
  }

processed_dataframe = clean.files('C:\\Users\\meher\\Desktop\\ED neurolab work\\data') #cleaned data frame to be used later

#create dictionaries for the next function
group_dict <- c('10-20'= 1,'11-03'= 1,'02-08'= 1,'02-09'=1,'02-16'=1,'10-25'= 2,'11-08'=2, '02-10'= 2, '11-01' = 3,'11-16'=3, '02-18'=3)
timepoint_dict <- c('10-20'=1,'10-25'=1, '11-01'=1, '11-03'=2,'11-08'=2,'11-16'=2,'02-08'= 3,'02-10'= 3,'02-16'= 3,'02-18'= 3)



#Function 2:  This function adds information to the full_data df about each magic word and which class learned each set of magic words
#date as key and value are groups, pass in the group date association

add.info <- function (data_frame,group_dictionary, timepoint_dictionary){

  group_1_words = c('molar','riven','graft','acrid','spume','pecan','olden','prune','snare','inset','shunt','elfin','affix','chive','crank','waxen','prank','circa','toxin','snick')
  group_2_words = c('borax','datum','shank','anvil','sidle','totem','inapt','belle','tulle','eject','brash','octet','usurp','chafe','chump','yodel','swath','clove','covet','froth')
  group_3_words = c('carob','heron','swank','awash','tripe','serif','exalt','crepe','ladle','offal','brunt','annex','allot','binge','wrest','lapel','wrack','lathe','cedar','skulk')

  full_data = data_frame %>% mutate(block = case_when(block == 'block1.xlsx'~'block1',
                                                     block == 'block2.xlsx'~'block2',
                                                     block == 'block3.xlsx'~'block3',
                                                     TRUE ~ block)) %>%
    mutate(date = case_when(date == '0-25_' ~ '10-25',
                            date == '1-10-' ~ '10-25',
                            date == '11-10' ~ '11-08',
                            TRUE ~ date)) %>%
    filter(date %in% names(timepoint_dictionary))%>%
    mutate(timepoint = timepoint_dictionary[date],

           participant = case_when(participant=='BLC_AP'~'BLC_267',
                                   TRUE~participant),
           group = group_dictionary[date],

           magic_word_group = case_when(words %in% group_1_words==TRUE~1,
                                        words %in% group_2_words==TRUE~2,
                                        words %in% group_3_words==TRUE~3,
                                        TRUE ~ 0),
           answered_correctly = case_when(itemType == 'magic' & mouse.clicked_name == 'familliar_resp'~1,
                                          itemType == 'magic' & mouse.clicked_name == 'unfamilliar_resp'~0,
                                          itemType == 'magic' & is.na(mouse.clicked_name)~0,
                                          itemType == 'pseudo' & mouse.clicked_name == 'unfamilliar_resp'~1,
                                          itemType == 'common' & mouse.clicked_name == 'familliar_resp'~1,
                                          itemType == 'common' & mouse.clicked_name == 'unfamilliar_resp'~0,
                                          itemType == 'pseudo' & mouse.clicked_name == 'familliar_resp'~0,
                                          itemType == 'common' & is.na(mouse.clicked_name)~0,
                                          itemType == 'pseudo' & is.na(mouse.clicked_name)~0,
                                          T~12))
  full_data %>% select(mouse.time,mouse.clicked_name,words,itemType,participant,block,timepoint,group,magic_word_group,answered_correctly,date) %>% write.csv('clean_data.csv')

  return(full_data)
  }

  final_processed_file <- add.info(processed_dataframe,group_dict,timepoint_dict) # use output from this as input for the rest


#Function 3: This function generates accuracy data for each individual and saves them in either or both wide and long format

wide.or.long <- function(format, dataframe){

  if(format == 'long'| format == 'both'){
    # save long format accuracy
    blc_id_acc_long = dataframe %>%
      filter(block!='practice') %>%
      mutate(mouse.clicked_name=as.character(mouse.clicked_name)) %>%
      filter(!is.na(itemType)) %>%
      filter(itemType=='magic') %>%
      filter(group==magic_word_group) %>%
      mutate(timepoint=as.factor(timepoint),
             mouse.clicked_name = case_when(is.na(mouse.clicked_name)~'unfamilliar_resp',
                                            T~mouse.clicked_name)) %>%
      group_by(timepoint,participant) %>%
      summarise(count = n(),
                total_correct = sum(answered_correctly),
                accuracy = total_correct/count) %>%
      select(participant,timepoint,accuracy)
    blc_id_acc_long %>% write.csv('blc_id_acc_long.csv')}

  if (format== 'wide' | format == 'both'){
    # save wide format accuracy
    blc_id_acc_wide = dataframe %>%
      filter(block!='practice') %>%
      mutate(mouse.clicked_name=as.character(mouse.clicked_name)) %>%
      filter(!is.na(itemType)) %>%
      filter(itemType=='magic') %>%
      filter(group==magic_word_group) %>%
      mutate(timepoint=as.factor(timepoint),
             mouse.clicked_name = case_when(is.na(mouse.clicked_name)~'unfamilliar_resp',
                                            T~mouse.clicked_name)) %>%
      group_by(timepoint,participant) %>%
      summarise(count = n(),
                total_correct = sum(answered_correctly),
                accuracy = total_correct/count) %>%
      select(participant,timepoint,accuracy) %>%
      pivot_wider(id_cols = participant,names_from = timepoint, names_prefix = "timepoint_", values_from = accuracy)
    blc_id_acc_wide %>%  write.csv('blc_id_acc_wide.csv')}

}

wide.or.long('both', final_processed_file)


#Function 4: This function generates a list of each participant by time point

list.by.timepoint <- function(timepointcount,dataframe){ #add if statement stating is the timepoint is greater 1 then do the second forloop

  for (i in 1:timepointcount){
    length(unique((dataframe %>% filter(timepoint== i))$participant))
    unique((dataframe %>% filter(timepoint==i)) %>% select(participant)) %>% write_csv(paste0('timepoint_',toString(i),'_participants.csv'))
  }

  if (timepointcount > 1){
    for (i in 2:timepointcount){
    unique((dataframe %>%
              select(participant, timepoint) %>%
              unique() %>%
              group_by(participant) %>%
              mutate(nobs = length(unique(timepoint))) %>%
              filter(nobs==i)) %>% select(participant)) %>% write_csv(paste0(toString(i),'_timepoints_participants.csv'))
  }}
}
list.by.timepoint(3,final_processed_file)

#Function 5:This function generates a data frame for comparing reaction times across time point by individual and word
compare.reaction.time <- function(dataframe,save_file_as='rt_changes.csv'){

  dataframe %>% select(participant,group,words,timepoint,
                       mouse.time,mouse.clicked_name,itemType,magic_word_group) %>%
    filter(timepoint!=3) %>%
    mutate(timepoint=as.character(timepoint),
           row_n = row_number()) %>%
    pivot_wider(id_cols=(c('participant','group','words','itemType','magic_word_group')),
                names_from = timepoint,
                values_from = c('mouse.time','mouse.clicked_name')) %>%
    unnest(cols='mouse.time_1') %>%
    unnest(cols='mouse.time_2') %>%
    unnest(cols='mouse.clicked_name_1')%>%
    unnest(cols='mouse.clicked_name_2') %>%
    mutate(rt_change = mouse.time_2-mouse.time_1,
           learned = group==magic_word_group)%>%
    write.csv(save_file_as)
  unique(dataframe$participant)
}

compare.reaction.time(final_processed_file,save_file_as='rt_changes.csv')

#Function 6: this function first plots the percentages of Responses by Word Type Across Timepoints for a specified class and then plots one for all classes.
plot.class.time_point.percentages <- function(dataframe,group_number,magicword_group){
  #Plots percentage of Responses by Word Type Across Timepoints
  print(dataframe %>%
  filter(block!='practice') %>%
    filter(!is.na(itemType)) %>%
    filter(itemType=='magic') %>%
    filter(group==group_number) %>%
    filter(magic_word_group==magicword_group) %>%
    mutate(timepoint=as.factor(timepoint)) %>%
    group_by(timepoint,group,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = resp_count/sum(resp_count))%>%
    ggplot(aes(x=timepoint, y = percent_resp*100, fill=mouse.clicked_name))+
    geom_bar(stat="identity", width = 0.7)+
    ggtitle('Percentage of Responses by Word Type Across Timepoints')+
    ylab('Percent')+
    facet_wrap(.~group))

  #Plots percentage of Responses by Word Type Across Timepoints by Class
  print(dataframe %>%
    filter(block!='practice') %>%
    filter(!is.na(itemType)) %>%
    filter(itemType=='magic') %>%
    filter(group==magic_word_group) %>%
    mutate(timepoint=as.factor(timepoint)) %>%
    group_by(timepoint,group,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = resp_count/sum(resp_count))%>%
    ggplot(aes(x=timepoint, y = percent_resp*100, fill=mouse.clicked_name))+
    geom_bar(stat="identity", width = 0.7)+
    ggtitle('Percentage of Responses by Word Type Across Timepoints by Class')+
    ylab('Percent')+
    facet_wrap(.~group))
}

plot.class.time_point.percentages(final_processed_file,1,1)


#Function 7: this function finds the accuracy by word type (flags for class and time point) and also plots give the accuracy for each individual.

plot.accuracy <- function(dataframe,group_number,magicword_group,timepoint_count){

  ## Builds dataframe for a specific group
  baseline_df = dataframe  %>%
    filter(group==group_number) %>%
    filter(!is.na(words)) %>%
    select(mouse.clicked_name,mouse.time,words,itemType,participant,date,block,answered_correctly,timepoint,magic_word_group)

  # plot Percentage of Responses by Word Type Across Timepoints
  print(baseline_df %>%
    filter(block!='practice') %>%
    filter(!is.na(itemType)) %>%
    group_by(timepoint,itemType,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = resp_count/sum(resp_count))%>%
    ggplot(aes(x=itemType, y = percent_resp*100, fill=mouse.clicked_name))+
    geom_bar(stat="identity", width = 0.7)+
    ggtitle('Percentage of Responses by Word Type Across Timepoints')+
    ylab('Percent')+
    facet_wrap(.~timepoint))

  # plot Mean Accuracy by Word Type
  print( baseline_df %>%
    filter(block!='practice') %>%
    filter(!(itemType=='magic' & magic_word_group !=magicword_group)) %>%  #parameter for magic group
    group_by(itemType,participant,timepoint) %>%
    summarise(count = n(),
              total_correct = sum(answered_correctly),
              accuracy = total_correct/count) %>%
    group_by(itemType,timepoint) %>%
    summarise(count=n(),
              mean_accuracy = mean(accuracy, na.rm=T),
              sd_accuracy = sd(accuracy, na.rm = T),
              se_accuracy = sd_accuracy/sqrt(count)) %>%
    ggplot(aes(x = itemType, y = mean_accuracy,fill=itemType))+
    geom_col()+
    geom_errorbar(aes(ymin=mean_accuracy-se_accuracy,ymax=mean_accuracy+se_accuracy),width = 0.25)+
    ggtitle('Mean Accuracy by Word Type')+
    facet_wrap(.~timepoint))

  # plot Accuracy Counts by Individual till a specified timepoint count

  for (i in 1:timepoint_count){
  print(baseline_df %>%
    filter(block!='practice') %>%
    filter(timepoint==i) %>%
    filter(itemType!='magic') %>%
    group_by(itemType,participant) %>%
    summarise(count = n(),
              total_correct = sum(answered_correctly),
              accuracy = total_correct/count) %>%
    group_by(itemType,participant) %>%
    summarise(count=n(),
              mean_accuracy = mean(accuracy, na.rm=T),
              sd_accuracy = sd(accuracy, na.rm = T),
              se_accuracy = sd_accuracy/sqrt(count)) %>%
    ggplot(aes(x = itemType, y = mean_accuracy,fill=itemType))+
    geom_col()+
    facet_wrap(.~participant))}
}
plot.accuracy(final_processed_file,1,1,2)


# Function 8: Percentage of response for low/high/magic words by timepoint - add flag for class/Group

######## Check the if the titles are correct- if the group number is equivalent to the magic word group ##########

#Overall Response Counts by Individual Word
plot.by.frequency.timepoint <- function(dataframe,magicword_group, word_type_list= list(word1)){
# plot Percentage of Responses by All Low Frequency Word Across Timepoints for the specified class #check if everything before forloop is relevant
  print(dataframe %>%
    filter(block!='practice') %>%
    filter(itemType=='magic') %>%
    filter(!is.na(itemType)) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = resp_count/sum(resp_count))%>%
    ggplot(aes(x=words, y = percent_resp*100, fill=mouse.clicked_name))+
    geom_bar(stat="identity", width = 0.7)+
    ggtitle(paste0('Percentage of Responses by All Low Frequency Word Across Timepoints - Group ',magicword_group))+
    ylab('Percent')+
    theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1))+
    coord_flip()+
    facet_wrap(.~timepoint))

  # plot Percentage of Responses for a specific magic word group by Low Frequency Word Across Timepoints
  print(dataframe %>%
    filter(block!='practice') %>%
    filter(itemType=='magic') %>%
    filter(!is.na(itemType)) %>%
    filter(magic_word_group== magicword_group) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = resp_count/sum(resp_count))%>%
    ggplot(aes(x=words, y = percent_resp*100, fill=mouse.clicked_name))+
    geom_bar(stat="identity", width = 0.7)+
    ggtitle(paste0('Percentage of Responses by Group ', magicword_group,' Low Frequency Word Across Timepoints - Group '),magicword_group)+
    ylab('Percent')+
    theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1))+
    coord_flip()+
    facet_wrap(.~timepoint))

  for (word in word_type_list){
    print(word)
    # plot Percentage of Responses for all the given word type Across Timepoints for the specific class number
    print ( final_processed_file %>%
              filter(block!='practice') %>%
              filter(itemType==word) %>%
              filter(!is.na(itemType)) %>%
              group_by(timepoint,words,mouse.clicked_name) %>%
              summarise(resp_count = n()) %>%
              mutate(percent_resp = resp_count/sum(resp_count))%>%
              ggplot(aes(x=words, y = percent_resp*100, fill=mouse.clicked_name))+
              geom_bar(stat="identity", width = 0.7)+
              ggtitle(paste0('Percentage of Responses by ',word, ' Word Across Timepoints - Group ',magicword_group))+
              ylab('Percent')+
              theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1))+
              coord_flip()+
              facet_wrap(.~timepoint))
  }
}

plot.by.frequency.timepoint(final_processed_file,1,word_type_list= list('magic','common','pseudo'))



#Function 9: This function creates tables for specific groups and saves them in csv files
create.tables <- function(dataframe,magicgroup_number) {
  dataframe %>%
    filter(block!='practice') %>%
    filter(itemType=='magic') %>%
    filter(!is.na(itemType)) %>%
    filter(magic_word_group==magicgroup_number) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = scales::percent(resp_count/sum(resp_count)),
           Word = words) %>%
    ungroup() %>%
    filter(mouse.clicked_name == 'familliar_resp')%>%
    select(timepoint,Word,percent_resp) %>%
    mutate(rn = row_number()) %>%
    pivot_wider(id_cols = Word, names_from = timepoint, names_prefix = 'Timepoint ', values_from = percent_resp) %>%
    write_csv(paste0('group_',magicgroup_number,'_magic_learning_three_timepoints.csv'))

  dataframe %>%
    filter(block!='practice') %>%
    filter(itemType=='common') %>%
    filter(!is.na(itemType)) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = scales::percent(resp_count/sum(resp_count)),
           Word = words) %>%
    ungroup() %>%
    filter(mouse.clicked_name == 'familliar_resp')%>%
    select(timepoint,Word,percent_resp) %>%
    mutate(rn = row_number()) %>%
    pivot_wider(id_cols = Word, names_from = timepoint, names_prefix = 'Timepoint ', values_from = percent_resp)%>%
    write_csv(paste0('group_',magicgroup_number,'_common_words_acc_three_timepoints.csv'))
  }
create.tables(final_processed_file,1)


#Function 10: checking function.

checking.function <- function(dataframe,magicgroup_number,group_number){
  dataframe %>%
    filter(block!='practice') %>%
    filter(itemType=='magic') %>%
    filter(!is.na(itemType)) %>%
    filter(!is.na(mouse.clicked_name)) %>%
    filter(magic_word_group!= magicgroup_number) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(resp_count = n()) %>%
    mutate(percent_resp = scales::percent(resp_count/sum(resp_count)),
           Word = words) %>%
    ungroup() %>%
    filter(mouse.clicked_name == 'familliar_resp')%>%
    select(timepoint,Word,percent_resp) %>%
    mutate(rn = row_number())%>%
    pivot_wider(id_cols = Word, names_from = timepoint, names_prefix = 'Timepoint ', values_from = percent_resp) %>%
    mutate(`Timepoint 1` = case_when(is.na(`Timepoint 1`)~'0%',
                                     T~`Timepoint 1`),
           `Timepoint 2` = case_when(is.na(`Timepoint 2`)~'0%',
                                     T~`Timepoint 2`),
           `Timepoint 3` = case_when(is.na(`Timepoint 3`)~'0%',
                                     T~`Timepoint 3`))%>%
    write_csv(paste0('group_',group_number,'_other_magic_words_three_timepoints.csv'))
  }
checking.function(final_processed_file,2,2)

#Function 11: T-test (flag for paired or not depending on data quality) to assess magic word learning

######## Using more than 2 timepoints doesnt work for the function is that ok? ##########

statistical.test <- function(dataframe,data_quality_type, number_of_timepoints, group_number, magicgroup_number,plot=TRUE/FALSE){
 if (number_of_timepoints<=2) {
  if (data_quality_type=='paired'){
  dataframe %>%
    filter(block!='practice')%>%
    filter(group==group_number) %>%
    filter(!is.na(mouse.clicked_name)) %>%
    filter(itemType=='magic') %>%
    filter(magic_word_group==magic_group_number) %>%
    mutate(timepoint=as.factor(timepoint)) %>%
    group_by(timepoint,participant,mouse.clicked_name) %>%
    summarise(count = n()) %>%
    filter(mouse.clicked_name == 'familliar_resp') %>%
    ggplot(aes(x=timepoint, y = count, fill = timepoint))+
    geom_boxplot()+
    ggtitle('Average of Familiar Responses for Magic Words over time')}
  else {
  t_data = dataframe%>%
    filter(block!='practice')%>%
    filter(group==group_number) %>%
    filter(!is.na(mouse.clicked_name)) %>%
    filter(itemType=='magic') %>%
    filter(magic_word_group == magicgroup_number) %>%
    mutate(timepoint=as.factor(timepoint)) %>%
    group_by(timepoint,participant,mouse.clicked_name) %>%
    summarise(count = n())%>%
    filter(mouse.clicked_name == 'familliar_resp') %>%
    pivot_wider(id_cols = participant, names_from=timepoint, names_prefix = "timepoint_", values_from = count)
  print(t.test(x=t_data$timepoint_1,y=t_data$timepoint_2))
  print(cohensD(x=t_data$timepoint_1,y=t_data$timepoint_2))
  }}
  #anova for more than 2 timepoints
  else {
    model_data = (dataframe %>%
      filter(block!='practice')%>%
      filter(group==group_number) %>%
      filter(!is.na(mouse.clicked_name)) %>%
      filter(itemType=='magic') %>%
      filter(magic_word_group == magicgroup_number) %>%
      mutate(timepoint=as.factor(timepoint)) %>%
      group_by(participant,timepoint,mouse.clicked_name) %>%
      summarise(count = n())%>%
      filter(mouse.clicked_name == 'familliar_resp') %>%
      ungroup())
    #fit repeated measures ANOVA model
    model <- aov(count~factor(timepoint)+Error(factor(participant)), data = model_data)
    #view model summary
    print(summary(model))
    # post-hoc tests to see where significant differences are
    print(emmeans(model, list(pairwise ~ timepoint), adjust = "tukey", lmer.df = "asymptotic"))
  }
  #optional plotting
  if (plot==TRUE){
  print(dataframe %>%
    filter(block!='practice')%>%
    filter(group==group_number) %>%
    filter(magic_word_group == magicgroup_number) %>%
    filter(!is.na(mouse.clicked_name)) %>%
    filter(itemType=='magic') %>%
    mutate(timepoint=as.factor(timepoint)) %>%
    group_by(timepoint,words,mouse.clicked_name) %>%
    summarise(count = n()) %>%
    filter(mouse.clicked_name == 'familliar_resp') %>%
    ggplot(aes(x=timepoint, y = count, fill = timepoint))+
    geom_col()+
    facet_wrap(.~words)+
    ggtitle('Number of Familiar Responses for Magic Words over time'))
}
  }

statistical.test(final_processed_file,'npaired',2,1,1,TRUE)

